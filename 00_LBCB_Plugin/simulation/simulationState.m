classdef simulationState < handle
    properties
        step = 0;
        subStep = 0;
        startTime = clock;
        startStates = stateEnum({...
            'Initialize',...
            'Get First Step',...
            'Start Clock',...
            'Store Offsets'...
            });
        state = stateEnum({...
            'Get Target',...
            'Send Target to LBCBs',...
            'Adjust for Elastic Deformation',...
            'Trigger AUX Systems',...
            'Cleanup for Next Step'...
            });
        edState = stateEnum({...
            'Check Difference between Current Position and Target',...
            'Calculate Adjustment to Command',...
            'Send Adjusted Command to LBCBs',...
            'Trigger AUX Systems',...
            'Cleanup for Next Adjustment'...
            });
    end
    methods
        function me = simulationState(step)
            me.step = step;
        end
        function start(me)
            me.startTime = clock;
        end
        function increment(me,useSubStep)
            if(useSubStep)
                me.subStep = me.subStep + 1;
                return;
            end
                me.step = me.step + 1;
                me.subStep = 1;
        end
        function et = getElapsedTime(me)
            et = clock - me.startTime;
        end
    end
end